<?php
/**
 * ApiClient
 * 
 * PHP version 5
 *
 * @category Class
 * @package  {{invokerPackage}} 
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace {{invokerPackage}};

/**
 * ApiClient Class Doc Comment
 *
 * @category Class
 * @package  {{invokerPackage}} 
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiClient
{
    /** 
     * Configuration
     * @var Configuration
     */
    protected $config;

    /**
     * @var APIConnector instance of an connector which handles API requests
     *
     */
    private $apiConnector;

    /**
     * @return APIConnector
     */
    public function getApiConnector()
    {
        return $this->apiConnector;
    }

    /**
     * @param APIConnector $apiConnector
     */
    public function setApiConnector($apiConnector)
    {
        $this->apiConnector = $apiConnector;
    }

    /**
     * Get the serializer
     * @return ObjectSerializer
     */
    public function getSerializer()
    {
        return $this->getApiConnector()->getSerializer();
    }
  
    /**
     * Constructor of the class
     * @param Configuration $config config for this ApiClient
     * @param ApiConnector $apiConnector connector to use when connecting to API (optional)
     */
    function __construct(Configuration $config = null, ApiConnector $apiConnector = null)
    {
        if ($config == null) {
            $config = Configuration::getDefaultConfiguration();
        }

        if ($apiConnector === null) {
            $this->setApiConnector(new APIGuzzleConnector());
        } else {
            $this->setApiConnector($apiConnector);
        }

        $this->config = $config;
        $this->getApiConnector()->setConfig($config);
        $this->getApiConnector()->setSerializer(new ObjectSerializer());
    }
  
    /**
     * Get the config
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }
  
    /**
     * Get API key (with prefix if set)
     * @param  string $apiKeyIdentifier name of apikey
     * @return string API key with the prefix
     */
    public function getApiKeyWithPrefix($apiKeyIdentifier)
    {
        $prefix = $this->config->getApiKeyPrefix($apiKeyIdentifier);
        $apiKey = $this->config->getApiKey($apiKeyIdentifier);
  
        if (!isset($apiKey)) {
            return null;
        }
  
        if (isset($prefix)) {
            $keyWithPrefix = $prefix." ".$apiKey;
        } else {
            $keyWithPrefix = $apiKey;
        }
  
        return $keyWithPrefix;
    }
    
    /**
     * Make the HTTP call (Sync)
     * @param string $resourcePath path to method endpoint
     * @param string $method       method to call
     * @param array  $queryParams  parameters to be place in query URL
     * @param array  $postData     parameters to be placed in POST body
     * @param string $acceptTypes preferred response content types
     * @param string $contentTypes content types of API requests
     * @param array  $headerParams parameters to be place in request header
     * @param string $responseType expected response type of the endpoint
     * @throws \{{invokerPackage}}\ApiException on a non 2xx response
     * @return mixed
     */
    public function callApi($resourcePath, $method, $queryParams, $postData, $acceptTypes, $contentTypes,
                            $headerParams, $responseType=null)
    {
        // construct the http header
        $headerParams = array_merge(
            (array)$this->config->getDefaultHeaders(), 
            (array)$headerParams
        );
  
        return $this->getApiConnector()->send($resourcePath, $method, $queryParams, $postData,
                                              $acceptTypes, $contentTypes, $headerParams, $responseType);
    }
  
    /**
     * Return the header 'Accept' based on an array of Accept provided
     *
     * @param string[] $accept Array of header
     *
     * @return string Accept (e.g. application/json)
     */
    public static function selectHeaderAccept($accept)
    {
        if (count($accept) === 0 or (count($accept) === 1 and $accept[0] === '')) {
            return null;
        } elseif (preg_grep("/application\/json/i", $accept)) {
            return 'application/json';
        } else {
            return implode(',', $accept);
        }
    }
  
    /**
     * Return the content type based on an array of content-type provided
     *
     * @param string[] $content_type Array fo content-type
     *
     * @return string Content-Type (e.g. application/json)
     */
    public static function selectHeaderContentType($content_type)
    {
        if (count($content_type) === 0 or (count($content_type) === 1 and $content_type[0] === '')) {
            return 'application/json';
        } elseif (preg_grep("/application\/json/i", $content_type)) {
            return 'application/json';
        } else {
            return implode(',', $content_type);
        }
    }
}
